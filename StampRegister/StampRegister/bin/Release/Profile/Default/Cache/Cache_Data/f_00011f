{"version":3,"file":"js/chunk-vendors-686511bc.f6d313aa.js","mappings":"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","sources":["webpack://@creators/cms-next/./node_modules/date-fns-tz/_lib/newDateUTC/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/_lib/tzIntlTimeZoneName/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/_lib/tzParseTimezone/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/_lib/tzPattern/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/_lib/tzTokenizeDate/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/format/formatters/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/format/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/formatInTimeZone/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/getTimezoneOffset/index.js","webpack://@creators/cms-next/./node_modules/date-fns-tz/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = newDateUTC;\n\n/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nfunction newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n  var utcDate = new Date(0);\n  utcDate.setUTCFullYear(fullYear, month, day);\n  utcDate.setUTCHours(hour, minute, second, millisecond);\n  return utcDate;\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzIntlTimeZoneName;\n\n/**\n * Returns the formatted time zone name of the provided `timeZone` or the current\n * system time zone if omitted, accounting for DST according to the UTC value of\n * the date.\n */\nfunction tzIntlTimeZoneName(length, date, options) {\n  var dtf = getDTF(length, options.timeZone, options.locale);\n  return dtf.formatToParts ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\n}\n\nfunction partsTimeZone(dtf, date) {\n  var formatted = dtf.formatToParts(date);\n  return formatted[formatted.length - 1].value;\n}\n\nfunction hackyTimeZone(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\n  return tzNameMatch ? tzNameMatch[0].substr(1) : '';\n} // If a locale has been provided `en-US` is used as a fallback in case it is an\n// invalid locale, otherwise the locale is left undefined to use the system locale.\n\n\nfunction getDTF(length, timeZone, locale) {\n  if (locale && !locale.code) {\n    throw new Error(\"date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`\");\n  }\n\n  return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\n    timeZone: timeZone,\n    timeZoneName: length\n  });\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzParseTimezone;\n\nvar _index = _interopRequireDefault(require(\"../tzTokenizeDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../newDateUTC/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-]\\d{2})$/,\n  timezoneHHMM: /^([+-]\\d{2}):?(\\d{2})$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nfunction tzParseTimezone(timezoneString, date, isUtcDate) {\n  var token;\n  var absoluteOffset; // Empty string\n\n  if (timezoneString === '') {\n    return 0;\n  } // Z\n\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    return -(hours * MILLISECONDS_IN_HOUR);\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    var minutes = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return hours > 0 ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now());\n    var utcDate = isUtcDate ? date : toUtcDate(date);\n    var offset = calcOffset(utcDate, timezoneString);\n    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n    return -fixedOffset;\n  }\n\n  return NaN;\n}\n\nfunction toUtcDate(date) {\n  return (0, _index2.default)(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\n\nfunction calcOffset(date, timezoneString) {\n  var tokens = (0, _index.default)(date, timezoneString); // ms dropped because it's not provided by tzTokenizeDate\n\n  var asUTC = (0, _index2.default)(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n  var asTS = date.getTime();\n  var over = asTS % 1000;\n  asTS -= over >= 0 ? over : 1000 + over;\n  return asUTC - asTS;\n}\n\nfunction fixOffset(date, offset, timezoneString) {\n  var localTS = date.getTime(); // Our UTC time is just a guess because our offset is just a guess\n\n  var utcGuess = localTS - offset; // Test whether the zone matches the offset for this ts\n\n  var o2 = calcOffset(new Date(utcGuess), timezoneString); // If so, offset didn't change, and we're done\n\n  if (offset === o2) {\n    return offset;\n  } // If not, change the ts by the difference in the offset\n\n\n  utcGuess -= o2 - offset; // If that gives us the local time we want, we're done\n\n  var o3 = calcOffset(new Date(utcGuess), timezoneString);\n\n  if (o2 === o3) {\n    return o2;\n  } // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n\n\n  return Math.max(o2, o3);\n}\n\nfunction validateTimezone(hours, minutes) {\n  return -23 <= hours && hours <= 23 && (minutes == null || 0 <= minutes && minutes <= 59);\n}\n\nvar validIANATimezoneCache = {};\n\nfunction isValidTimezoneIANAString(timeZoneString) {\n  if (validIANATimezoneCache[timeZoneString]) return true;\n\n  try {\n    new Intl.DateTimeFormat(undefined, {\n      timeZone: timeZoneString\n    });\n    validIANATimezoneCache[timeZoneString] = true;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** Regex to identify the presence of a time zone specifier in a date string */\nvar tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\nvar _default = tzPattern;\nexports.default = _default;\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzTokenizeDate;\n\n/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nfunction tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction partsOffset(dtf, date) {\n  try {\n    var formatted = dtf.formatToParts(date);\n    var filled = [];\n\n    for (var i = 0; i < formatted.length; i++) {\n      var pos = typeToPos[formatted[i].type];\n\n      if (pos >= 0) {\n        filled[pos] = parseInt(formatted[i].value, 10);\n      }\n    }\n\n    return filled;\n  } catch (error) {\n    if (error instanceof RangeError) {\n      return [NaN];\n    }\n\n    throw error;\n  }\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n} // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\n\n\nvar dtfCache = {};\n\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n\n  return dtfCache[timeZone];\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _index = _interopRequireDefault(require(\"../../_lib/tzIntlTimeZoneName/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../../_lib/tzParseTimezone/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_MINUTE = 60 * 1000;\nvar formatters = {\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, localize, options) {\n    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date);\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimeter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, localize, options) {\n    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date);\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimeter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, localize, options) {\n    var timezoneOffset = getTimeZoneOffset(options.timeZone, options._originalDate || date);\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return (0, _index.default)('short', originalDate, options);\n      // Long\n\n      case 'zzzz':\n      default:\n        return (0, _index.default)('long', originalDate, options);\n    }\n  }\n};\n\nfunction getTimeZoneOffset(timeZone, originalDate) {\n  var timeZoneOffset = timeZone ? (0, _index2.default)(timeZone, originalDate, true) / MILLISECONDS_IN_MINUTE : originalDate.getTimezoneOffset();\n\n  if (Number.isNaN(timeZoneOffset)) {\n    throw new RangeError('Invalid time zone specified: ' + timeZone);\n  }\n\n  return timeZoneOffset;\n}\n\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}\n\nfunction formatTimezone(offset, dirtyDelimeter) {\n  var delimeter = dirtyDelimeter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(Math.floor(absOffset % 60), 2);\n  return sign + hours + delimeter + minutes;\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimeter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimeter);\n}\n\nfunction formatTimezoneShort(offset, dirtyDelimeter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimeter = dirtyDelimeter || '';\n  return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2);\n}\n\nvar _default = formatters;\nexports.default = _default;\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = format;\n\nvar _index = _interopRequireDefault(require(\"date-fns/format/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"./formatters/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |\n * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the\n *    preferred standard of the current locale (en-US by default) which may not always give the expected result.\n *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole\n *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard\n *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this\n *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:\n *   https://git.io/fxCyr\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var matches = formatStr.match(tzFormattingTokensRegExp);\n\n  if (matches) {\n    var date = (0, _index3.default)(dirtyDate, options); // Work through each match and replace the tz token in the format string with the quoted\n    // formatted time zone so the remaining tokens can be filled in by date-fns#format.\n\n    formatStr = matches.reduce(function (result, token) {\n      if (token[0] === \"'\") {\n        return result; // This is a quoted portion, matched only to ensure we don't match inside it\n      }\n\n      var pos = result.indexOf(token);\n      var precededByQuotedSection = result[pos - 1] === \"'\";\n      var replaced = result.replace(token, \"'\" + _index2.default[token[0]](date, token, null, options) + \"'\"); // If the replacement results in two adjoining quoted strings, the back to back quotes\n      // are removed so it doesn't look like an escaped quote.\n\n      return precededByQuotedSection ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1) : replaced;\n    }, formatStr);\n  }\n\n  return (0, _index.default)(dirtyDate, formatStr, options);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatInTimeZone;\n\nvar _index = _interopRequireDefault(require(\"date-fns/_lib/cloneObject/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../format/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../utcToZonedTime/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name formatInTimeZone\n * @category Time Zone Helpers\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\n *\n * @param {Date|String|Number} date - the date representing the local time / real UTC time\n * @param {String} timeZone - the time zone this date should be formatted for; can be an offset or IANA time zone\n * @param {String} formatStr - the string of tokens\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {String} the formatted date string\n */\nfunction formatInTimeZone(date, timeZone, formatStr, options) {\n  var extendedOptions = (0, _index.default)(options);\n  extendedOptions.timeZone = timeZone;\n  return (0, _index2.default)((0, _index3.default)(date, timeZone), formatStr, extendedOptions);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTimezoneOffset;\n\nvar _index = _interopRequireDefault(require(\"../_lib/tzParseTimezone/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name getTimezoneOffset\n * @category Time Zone Helpers\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\n *\n * @description\n * Returns the time zone offset from UTC time in milliseconds for IANA time zones as well\n * as other time zone offset string formats.\n *\n * For time zones where daylight savings time is applicable a `Date` should be passed on\n * the second parameter to ensure the offset correctly accounts for DST at that time of\n * year. When omitted, the current date is used.\n *\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {Date|Number} [date] - the date with values representing the local time\n * @returns {Number} the time zone offset in milliseconds\n *\n * @example\n * const result = getTimezoneOffset('-07:00')\n *   //=> -18000000 (-7 * 60 * 60 * 1000)\n * const result = getTimezoneOffset('Africa/Johannesburg')\n *   //=> 7200000 (2 * 60 * 60 * 1000)\n * const result = getTimezoneOffset('America/New_York', new Date(2016, 0, 1))\n *   //=> -18000000 (-5 * 60 * 60 * 1000)\n * const result = getTimezoneOffset('America/New_York', new Date(2016, 6, 1))\n *   //=> -14400000 (-4 * 60 * 60 * 1000)\n */\nfunction getTimezoneOffset(timeZone, date) {\n  return -(0, _index.default)(timeZone, date);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\n// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\nmodule.exports = {\n  format: require('./format/index.js'),\n  formatInTimeZone: require('./formatInTimeZone/index.js'),\n  getTimezoneOffset: require('./getTimezoneOffset/index.js'),\n  toDate: require('./toDate/index.js'),\n  utcToZonedTime: require('./utcToZonedTime/index.js'),\n  zonedTimeToUtc: require('./zonedTimeToUtc/index.js')\n};"],"names":["newDateUTC","fullYear","month","day","hour","minute","second","millisecond","utcDate","Date","setUTCFullYear","setUTCHours","Object","defineProperty","exports","value","module","default","tzIntlTimeZoneName","length","date","options","dtf","getDTF","timeZone","locale","formatToParts","partsTimeZone","hackyTimeZone","formatted","format","replace","tzNameMatch","exec","substr","code","Error","Intl","DateTimeFormat","undefined","timeZoneName","tzParseTimezone","_index","_interopRequireDefault","_index2","obj","__esModule","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneString","isUtcDate","token","absoluteOffset","hours","parseInt","validateTimezone","NaN","minutes","Math","abs","isValidTimezoneIANAString","now","toUtcDate","offset","calcOffset","fixedOffset","fixOffset","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","tokens","asUTC","getTime","asTS","over","localTS","utcGuess","o2","o3","max","validIANATimezoneCache","timeZoneString","error","tzPattern","_default","tzTokenizeDate","getDateTimeFormat","partsOffset","hackyOffset","typeToPos","year","filled","i","pos","type","RangeError","parsed","dtfCache","testDateFormatted","hour12","hourCycleSupported","hourCycle","formatters","X","localize","timezoneOffset","getTimeZoneOffset","_originalDate","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","originalDate","timeZoneOffset","getTimezoneOffset","Number","isNaN","addLeadingZeros","number","targetLength","sign","output","toString","dirtyDelimeter","delimeter","absOffset","floor","String","_index3","tzFormattingTokensRegExp","dirtyDate","dirtyFormatStr","dirtyOptions","formatStr","matches","match","reduce","result","indexOf","precededByQuotedSection","replaced","substring","formatInTimeZone","extendedOptions","toDate","utcToZonedTime","zonedTimeToUtc"],"sourceRoot":""}